{"version":3,"sources":["lib/server.ts"],"names":[],"mappings":";;AAAA,qDAAuD;AACvD,mCAAqC;AACrC,mCAAqC;AACrC,oCAAoC;AACpC,iCAAmC;AACnC,gEAAgE;AAChE,4CAA4C;AAE5C,uCAA0D;AAG1D;;GAEG;AACH;IAkBI;;;;OAIG;IACH,gBAAmB,MAAW;QAAX,WAAM,GAAN,MAAM,CAAK;QAC1B,2DAA2D;QAC3D,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAO,CAAC;YACzB,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK;YACxB,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG;YACxB,WAAW,EAAE,MAAM,CAAC,WAAW;SAClC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAhCD;;;;;;OAMG;IACW,gBAAS,GAAvB,UAAwB,MAAW;QAC/B,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAyBD;;OAEG;IACI,6BAAY,GAAnB;QACI,8BAA8B;QACxB,QAAS,CAAC,OAAO,GAAG,QAAQ,CAAC;QACnC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,uBAAM,GAAb;QACI,kCAAkC;IACtC,CAAC;IAED;;OAEG;IACI,qBAAI,GAAX;QACI;;WAEG;IACP,CAAC;IAED;;OAEG;IACI,8BAAa,GAApB;QAAA,iBAOC;QANG,6BAA6B;QAC7B,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,CAAC;QACtD,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,IAAI;YACpB,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,8BAA4B,IAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,uBAAM,GAAb;QAAA,iBAIC;QAHG,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,2BAAyB,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAM,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;IACL,aAAC;AAAD,CAtFA,AAsFC,IAAA;AAtFY,wBAAM","file":"server.js","sourcesContent":["import * as sourceMapSupport from \"source-map-support\";\nimport * as mongoose from \"mongoose\";\nimport * as bluebird from \"bluebird\";\n// for heroku to bind to a http port\nimport * as express from \"express\";\n// List of the component router instances  (name in plural form)\n//import { service as seed }  from \"./seed\";\n\nimport { default as Service, Microplum } from \"microplum\";\n\n\n/**\n * The server main class\n */\nexport class Server {\n\n    /**\n     * Seneca microservice connector\n     */\n    public microplum: Microplum;\n\n    /**\n     * Bootstrap the application.\n     *\n     * @method bootstrap\n     * @static\n     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.\n     */\n    public static bootstrap(config: any): Server {\n        return new Server(config);\n    }\n\n    /**\n     * Server constructor. Create and configure expressjs application\n     *\n     * @constructor\n     */\n    constructor(public config: any) {\n        // errors thrown with the typescript files not generated js\n        sourceMapSupport.install();\n        this.microplum = new Service({\n            app: config.app || \"app\",\n            version: 2,\n            amqpUrl: config.amqp.url,\n            debugUserId: config.debugUserId,\n        });\n        this.microplum.client();\n        this.dbConnection();\n        this.routes();\n        this.errorHandling();\n        this.microplum.listen();\n        this.seed();\n        this.listen();\n    }\n\n    /**\n     * Set-up db connection\n     */\n    public dbConnection(): void {\n        //mongoose.Promise = bluebird;\n        (<any>mongoose).Promise = bluebird;\n        mongoose.connect(this.config.mongo.url);\n    }\n\n    /**\n     * Add all routes\n     */\n    public routes(): void {\n        //this.microplum.useService(seed);\n    }\n\n    /**\n     * Clean and seed the db with initial data if set in the config file\n     */\n    public seed(): void {\n        /*if (this.config.seedDB) {\n            this.microplum.actPromise({ role: \"app\", cmd: \"reset\", seed: true });\n        }*/\n    }\n\n    /**\n     * Raise unhandled exceptions and handle exceptions to the response.\n     */\n    public errorHandling(): void {\n        // raise unhandled exceptions\n        process.on(\"unhandledRejection\", r => console.log(r));\n        process.on(\"exit\", (code) => {\n            this.microplum.close();\n            console.log(`About to exit with code: ${code}`);\n        });\n    }\n\n    /**\n     * Listen http for Heroku to have http server\n     */\n    public listen(): void {\n        express().listen(this.config.server.port, () => {\n            console.log(`Magic happens on port ${this.config.server.port}`);\n        });\n    }\n}\n"]}
{"version":3,"sources":["lib/server.ts"],"names":[],"mappings":";;AAAA,uDAAuD;AACvD,qCAAqC;AACrC,qCAAqC;AACrC,oCAAoC;AACpC,mCAAmC;AACnC,gEAAgE;AAChE,4CAA4C;AAE5C,yCAA0D;AAG1D,SAAS;AACT,uCAAuC;AAGvC;;GAEG;AACH;IAkBI;;;;OAIG;IACH,YAAmB,MAAW;QAAX,WAAM,GAAN,MAAM,CAAK;QAC1B,2DAA2D;QAC3D,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAO,CAAC;YACzB,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK;YAC7B,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;YAC9B,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG;YAC7B,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;SACvC,CAAC,CAAC;QACH,8CAA8C;QAC9C,wBAAwB;QACxB,6CAA6C;QAC7C,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IApCD;;;;;;OAMG;IACI,MAAM,CAAC,SAAS,CAAC,MAAW;QAC/B,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IA6BD;;OAEG;IACI,YAAY;QACf,8BAA8B;QACxB,QAAS,CAAC,OAAO,GAAG,QAAQ,CAAC;QACnC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,MAAM;QACT,kCAAkC;IACtC,CAAC;IAED,kCAAkC;IAClC,qBAAqB;IACrB,iDAAiD;IACjD,sDAAsD;IACtD,UAAU;IACV,2CAA2C;IAC3C,IAAI;IAEJ;;OAEG;IACI,IAAI;QACP;;WAEG;IACP,CAAC;IAED;;OAEG;IACI,aAAa;QAChB,6BAA6B;QAC7B,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,MAAM;QACT,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;YAC3C,OAAO,CAAC,GAAG,CAAC,yBAAyB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAlGD,wBAkGC","file":"server.js","sourcesContent":["import * as sourceMapSupport from \"source-map-support\";\r\nimport * as mongoose from \"mongoose\";\r\nimport * as bluebird from \"bluebird\";\r\n// for heroku to bind to a http port\r\nimport * as express from \"express\";\r\n// List of the component router instances  (name in plural form)\r\n//import { service as seed }  from \"./seed\";\r\n\r\nimport { default as Service, Microplum } from \"microplum\";\r\n\r\n\r\n//LOGGING\r\n// import { logging } from \"logpapaya\";\r\n\r\n\r\n/**\r\n * The server main class\r\n */\r\nexport class Server {\r\n\r\n    /**\r\n     * Seneca microservice connector\r\n     */\r\n    public microplum: Microplum;\r\n\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @method bootstrap\r\n     * @static\r\n     * @return {ng.auto.IInjectorService} Returns the newly created injector for this app.\r\n     */\r\n    public static bootstrap(config: any): Server {\r\n        return new Server(config);\r\n    }\r\n\r\n    /**\r\n     * Server constructor. Create and configure expressjs application\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(public config: any) {\r\n        // errors thrown with the typescript files not generated js\r\n        sourceMapSupport.install();\r\n        this.microplum = new Service({\r\n            app: this.config.app || \"app\",\r\n            roles: this.config.roles || [],\r\n            version: 2,\r\n            amqpUrl: this.config.amqp.url,\r\n            debugUserId: this.config.debugUserId,\r\n        });\r\n        // logging.info(\"LOGGING WINSTON INIT before\")\r\n        // this.initMiddleware()\r\n        // logging.info(\"LOGGING WINSTON INIT after\")\r\n        this.microplum.client();\r\n        this.dbConnection();\r\n        this.routes();\r\n        this.errorHandling();\r\n        this.microplum.listen();\r\n        this.seed();\r\n        this.listen();\r\n    }\r\n\r\n    /**\r\n     * Set-up db connection\r\n     */\r\n    public dbConnection(): void {\r\n        //mongoose.Promise = bluebird;\r\n        (<any>mongoose).Promise = bluebird;\r\n        mongoose.connect(this.config.mongo.url);\r\n    }\r\n\r\n    /**\r\n     * Add all routes\r\n     */\r\n    public routes(): void {\r\n        //this.microplum.useService(seed);\r\n    }\r\n\r\n    // public initMiddleware(): void {\r\n    //     logging.init({\r\n    //         app: this.config.app || \"default-app\",\r\n    //         env: process.env.NODE_ENV || \"default-env\",\r\n    //     });\r\n    //     logging.info(\"LOGGING WINSTON INIT\")\r\n    // }\r\n\r\n    /**\r\n     * Clean and seed the db with initial data if set in the config file\r\n     */\r\n    public seed(): void {\r\n        /*if (this.config.seedDB) {\r\n            this.microplum.actPromise({ role: \"app\", cmd: \"reset\", seed: true });\r\n        }*/\r\n    }\r\n\r\n    /**\r\n     * Raise unhandled exceptions and handle exceptions to the response.\r\n     */\r\n    public errorHandling(): void {\r\n        // raise unhandled exceptions\r\n        process.on(\"unhandledRejection\", r => console.log(r));\r\n        process.on(\"exit\", (code) => {\r\n            this.microplum.close();\r\n            console.log(`About to exit with code: ${code}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen http for Heroku to have http server\r\n     */\r\n    public listen(): void {\r\n        express().listen(this.config.server.port, () => {\r\n            console.log(`Magic happens on port ${this.config.server.port}`);\r\n        });\r\n    }\r\n}\r\n"]}
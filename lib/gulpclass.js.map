{"version":3,"sources":["lib/gulpclass.ts"],"names":[],"mappings":"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","file":"gulpclass.js","sourcesContent":["import { Gulpclass, SequenceTask, Task } from \"gulpclass/Decorators\";\nimport { spawn } from \"child_process\";\n\nimport * as gulp from \"gulp\";\nimport * as del from \"del\";\nimport * as ts from \"gulp-typescript\";\nimport * as watch from \"gulp-watch\";\nimport * as mocha from \"gulp-mocha\";\nimport * as env from \"gulp-env\";\nimport * as sourcemaps from \"gulp-sourcemaps\";\nimport * as pm2 from \"pm2\";\nimport * as _ from \"lodash\";\nimport * as fs from \"fs\";\nimport * as gitUserName from \"git-user-name\";\nimport * as gitBranch from \"git-branch\";\nimport * as gitRepoName from \"git-repo-name\";\nimport * as gitUserEmail from \"git-user-email\";\nimport * as gitRemoteUserName from \"git-username\";\nimport {async} from \"q\";\n\n\nexport interface PortConfig {\n    web: number;\n    debug: number;\n}\n\nexport interface PathConfig {\n    typescript: string[];\n    generated: string[];\n    resources: string[];\n    integrationTests: string[];\n    unitTests: string[];\n    tsConfig: string;\n    index: string;\n    workingDir: string;\n}\n\nexport interface ServerConfig {\n    /**\n     * Web server process numbers\n     * Set by Heroku or -1 to scale to max cpu core -1\n     */\n    concurrency: number;\n    /**\n     * Max RAM memory when server will be reloaded\n     */\n    maxMemory: number;\n    /**\n     * The maximum number of times in a row a script will be restarted if it exits in less than minUptime\n     */\n    maxRestarts: number;\n    /**\n     * Should server be run in daemon mode\n     */\n    daemon: boolean;\n    /**\n     * Arguments for the server apps\n     */\n    args?: string;\n    /**\n     * Force clustr mode even on dev\n     */\n    forceClusterMode: boolean;\n}\n\n/**\n * Configuration for the gulp, web server, running env, etc\n */\nexport interface GulpConfig {\n    /**\n     * Name of the app that will be present in the process table of the PM2 and in the logs\n     */\n    name: string,\n    /**\n     * Namespace for the configuration app containing env variables and other config. By default is \".\"\n     */\n    config: string,\n    /**\n     * Environment: development, production, testing\n     * When starting with word \"dev\" it\"s a development env with debug mode and live watch reloading.\n     */\n    environment?: string;\n    /**\n     * Ports to open the web, debug\n     */\n    port?: PortConfig;\n    /**\n     * Paths for the sources and configurations.\n     */\n    path?: PathConfig;\n    /**\n     * Config dedicated to the server part of the application that listening on some actions.\n     */\n    server?: ServerConfig;\n}\n\n/**\n * Default values for the configuration\n * @type {GulpConfig}\n */\nexport const DEFAULT_CONFIG: GulpConfig = {\n    name: \"app\",\n    config: \".\",\n    environment: process.env.NODE_ENV || \"production\",\n    port: {\n        web: process.env.PORT || 8080,\n        debug: process.env.PORT_DEBUG || 5050,\n    },\n    path: {\n        typescript: [\"./**/*.ts\"],\n        generated: [\"./**/*.js\"],\n        resources: [\"./**/*.json\", \"./**/*.yml\", \"./*.lock\"],\n        integrationTests: [\"./**/*.spec.js\"],\n        unitTests: [\"./**/*.test.js\"],\n        tsConfig: \"./tsconfig.json\",\n        index: \".\",\n        workingDir: \".\",\n    },\n    server: {\n        concurrency: process.env.WEB_CONCURRENCY || -1,\n        maxMemory: process.env.WEB_MEMORY || 512,\n        maxRestarts: 10,\n        forceClusterMode: process.env.CLUSTER_MODE === \"true\" || false,\n        daemon: false,\n    },\n};\n\n@Gulpclass()\nexport default class Gulpfile {\n\n    /**\n     * Update default configuration before using it\n     * @param config to change the default\n     * @return {Gulpfile} class of the gulpfile\n     */\n    public static forConfig(config: GulpConfig = null): Function {\n        if (config) {\n            _.merge(DEFAULT_CONFIG, config);\n        }\n        console.log(`Start working for config: ${JSON.stringify(DEFAULT_CONFIG)}`);\n        return Gulpfile;\n    };\n\n    // CONFIG\n    protected config: GulpConfig = DEFAULT_CONFIG;\n\n    // PATHS\n    public src: string[] = [...this.config.path.typescript, ...this.config.path.resources];\n    public ignoreRunningSrc: string[] = [\"node_modules\", ...this.config.path.typescript];\n    public runningSrc: string[] = [...this.config.path.generated, ...this.config.path.resources];\n\n    // PRE-CONFIG\n    protected tsProject: any = ts.createProject(this.config.path.tsConfig);\n\n    public isDevMode(): boolean {\n        return this.config.environment.startsWith(\"dev\");\n    }\n\n    public async fileExists(path: string, permissions = fs.constants.R_OK): Promise<boolean> {\n        return new Promise<boolean>(r => fs.access(path, permissions, e => r(!e)));\n    }\n\n    public async _envFromMap(map: {[key:string]: string}): Promise<{}> {\n        console.log(`Setting environment for ${JSON.stringify(map)}`);\n\n        let envs = await env({\n            vars: map,\n        });\n        return Promise.resolve(envs);\n    }\n\n    public async _envFromNamespace(namespace: string): Promise<{}> {\n        let path = `${namespace}.ts`;\n        if (!(await this.fileExists(path))) {\n            return Promise.resolve({});\n        } else {\n            console.log(`Reading environment from ${path}`);\n            let envs = await env({\n                file: path,\n                handler: (content: string, filename: string): {} => {\n                    let envs = eval(this.tsProject.typescript.transpile(content));\n                    Object.keys(envs).forEach(key => {\n                        console.log('env', key, envs[key])\n                        if (process.env[key]) {\n                            envs[key] = process.env[key];\n                        }\n                    });\n                    return envs;\n                },\n            });\n            return Promise.resolve(envs);\n        }\n    }\n\n    public async env(prefix: string): Promise<void> {\n        this._envFromMap({\n            GIT_USER_EMAIL: gitUserEmail(),\n            GIT_USER_NAME: gitUserName(),\n            GIT_USER: gitRemoteUserName(),\n            GIT_REPOSITORY: gitRepoName.sync(),\n            GIT_BRANCH: gitBranch.sync(),\n        });\n        let globalPrefix = `${this.config.config}/${prefix}`;\n        let localPrefix = `./${prefix}`;\n        let branch = (process.env.GIT_BRANCH in [\"production\", \"test\"]) ? process.env.GIT_BRANCH : \"development\";\n\n        this._envFromNamespace(`${globalPrefix}.${branch}.${process.env.GIT_USER}.${process.env.GIT_REPOSITORY}`);\n        this._envFromNamespace(`${globalPrefix}.${branch}.${process.env.GIT_USER}`);\n        this._envFromNamespace(`${globalPrefix}.${process.env.GIT_USER}.${process.env.GIT_REPOSITORY}`);\n        this._envFromNamespace(`${globalPrefix}.${process.env.GIT_USER}`);\n        this._envFromNamespace(`${globalPrefix}.${branch}.${process.env.GIT_REPOSITORY}`);\n        this._envFromNamespace(`${globalPrefix}.${branch}`);\n        this._envFromNamespace(`${globalPrefix}.${process.env.GIT_REPOSITORY}`);\n        this._envFromNamespace(globalPrefix);\n        this._envFromNamespace(localPrefix);\n    }\n\n    @Task(\"env:server\")\n    public async envServer(): Promise<void> {\n        return this.env(\"config.server\");\n    }\n\n    @Task(\"env:client\")\n    public async envClient(): Promise<void> {\n        return this.env(\"config.client\");\n    }\n\n    @Task(\"env:deploy\")\n    public async envDeploy(): Promise<void> {\n        return this.env(\"config.deploy\");\n    }\n\n    @Task(\"clean\")\n    public async clean(): Promise<void> {\n        return del([\"./lib/**/*.js\", \"./**/*.map\"]);\n    }\n\n    @Task(\"watch\")\n    public async watch(): Promise<void> {\n        return watch(this.config.path.typescript, async (): Promise<void> => {\n            console.log(\"TypeScript source changed. Transpiling...\");\n            return this.typescript();\n        });\n    }\n\n    @Task(\"typescript\")\n    public async typescript(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            this.tsProject.src()\n                .pipe(sourcemaps.init())\n                .pipe(this.tsProject())\n                .pipe(sourcemaps.write(\".\"))\n                .pipe(gulp.dest(\"\"))\n                .on(\"finish\", resolve)\n                .on(\"error\", reject);\n        });\n    }\n\n    @Task(\"build\")\n    public async build(): Promise<void> {\n        console.log(`build for app: ${this.config.name}`);\n        return this.typescript();\n    }\n\n    @Task(\"server:stop\")\n    public async serverStop(): Promise<void> {\n        return pm2.killDaemon();\n    }\n\n    @Task(\"server\")\n    public async server(): Promise<void> {\n\n        let MACHINE_NAME = \"hk1\";\n        let PRIVATE_KEY = \"XXXXX\"; // Keymetrics Private key\n        let PUBLIC_KEY = \"XXXXX\"; // Keymetrics Public  key\n\n        return pm2.connect(this.config.server.daemon, (err: any): void => {\n            if (err) {\n                console.error(\"[PM2]:\"+err);\n                process.exit(2);\n            }\n\n            pm2.start({\n                script: this.config.path.index,\n                args: this.config.server.args,\n                name: `${this.config.name}`, // this is hack to fix the pm2 error for setting this as a reference\n                exec_mode: (!this.config.server.forceClusterMode && this.isDevMode()) ? \"fork\" : \"cluster\", // ----> https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md#schema\n                instances: (this.isDevMode()) ? 1 : this.config.server.concurrency,\n                max_memory_restart: this.config.server.maxMemory + \"M\", // Auto-restart if process takes more than XXmo\n                maxRestarts: this.config.server.maxRestarts,\n                source_map_support: true,\n                env: {  // If needed declare some environment variables\n                    \"NODE_ENV\": this.config.environment,\n                    \"PORT\": this.config.port.web,\n                },\n                cwd: this.config.path.workingDir,\n                interpreterArgs: [`--inspect=${this.config.port.debug}`],\n                post_update: [\"npm install\"], // Commands to execute once we do a pull from Keymetrics\n                watch: (this.isDevMode()) ? this.runningSrc : undefined,\n                ignore_watch: (this.isDevMode()) ? this.ignoreRunningSrc : undefined,\n                watch_options: (this.isDevMode()) ? {\n                    followSymlinks: false\n                } : undefined,\n            }, (err: any, apps): void => {\n                if (err) {\n                    throw err;\n                }\n\n                //pm2.interact(PRIVATE_KEY, PUBLIC_KEY, MACHINE_NAME, () => {\n\n                // Display logs in standard output\n                pm2.launchBus((err: any, bus): void => {\n                    console.log(\"[PM2] Log streaming started\");\n\n                    bus.on(\"log:out\", (packet): void => {\n                        // stream the logs\n                        console.log(\"[App:%s] %s\", packet.process.name, packet.data);\n                    });\n\n                    bus.on(\"log:err\", (packet): void => {\n                        console.error(\"[App:%s][Err] %s\", packet.process.name, packet.data);\n                        //if (this.isDevMode()) { // kill app on error in dev mode\n                        //    pm2.killDaemon();\n                        //}\n                    });\n                });\n\n                //});\n            });\n        });\n\n    }\n\n    @Task(\"integration:test\")\n    public async integrationTest(): Promise<void> {\n        await this.envServer();\n        return this.typescript().then(() => {\n            gulp.src(this.config.path.integrationTests, { read: false })\n                .pipe(mocha({\n                    reporter: 'spec',\n                    //globals: { },\n                }));\n        });\n    }\n\n    @Task(\"unit:test\")\n    public async unitTest(): Promise<void> {\n        await this.envServer();\n        return this.typescript().then(() => {\n            gulp.src(this.config.path.unitTests, { read: false })\n                .pipe(mocha({\n                    reporter: 'spec',\n                    //globals: { },\n                }));\n        });\n    }\n\n    @Task(\"test\")\n    public async test(): Promise<void> {\n        return this.unitTest()\n            .then(this.integrationTest.bind(this));\n        //spawn(\"node\", [\".\"], { stdio: \"inherit\" });\n    }\n\n    @Task(\"dev\")\n    public async dev(): Promise<void> {\n        this.config.environment = process.env.NODE_ENV || \"development\";\n        return this.build()\n            .then(this.watch.bind(this));\n    }\n\n    @Task(\"dev:server\")\n    public async devServer(): Promise<void> {\n        await this.envServer();\n        return this.dev()\n            .then(this.server.bind(this));\n    }\n\n    @Task(\"run:server\")\n    public async runServer(): Promise<void> {\n        await this.envServer();\n        await this.build();\n        await this.server();\n    }\n\n\n    @SequenceTask()\n    public default(): Array<string> {\n        return [\"clean\", \"run:server\"];\n    }\n}\n"]}
{"version":3,"sources":["lib/gulpclass.ts"],"names":[],"mappings":"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","file":"gulpclass.js","sourcesContent":["import { Gulpclass, SequenceTask, Task } from \"gulpclass/Decorators\";\nimport { spawn } from \"child_process\";\n\nimport * as gulp from \"gulp\";\nimport * as del from \"del\";\nimport * as ts from \"gulp-typescript\";\nimport * as watch from \"gulp-watch\";\nimport * as sourcemaps from \"gulp-sourcemaps\";\nimport * as pm2 from \"pm2\";\n\n\n@Gulpclass()\nexport default class Gulpfile {\n\n    public tsSrc: Array<string> = [\"./**/*.ts\"];\n    public jsSrc: Array<string> = [\"./**/*.ts\"];\n    public resourceSrc: Array<string> = [\"./**/*.json\", \"./**/*.yml\", \"./*.lock\"];\n\n    public src: Array<string> = [...this.tsSrc, ...this.resourceSrc];\n    public runningSrc: Array<string> = [...this.jsSrc, ...this.resourceSrc];\n\n    public environment: string = process.env.NODE_ENV || \"production\";\n\n    protected tsProject: any = ts.createProject(\"./tsconfig.json\");\n\n    public isDevMode(): boolean {\n        return this.environment.startsWith(\"dev\");\n    }\n\n    @Task(\"clean\")\n    public async clean(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            del([\"./lib/**/*.js\", \"./gulpclass.js\", \"./**/*.map\"], resolve);\n        });\n    }\n\n    @Task(\"watch\")\n    public async watch(): Promise<void> {\n        return watch(this.tsSrc, async (): Promise<void> => {\n            console.log(\"TypeScript source changed. Transpiling...\");\n            return this.typescript();\n        });\n    }\n\n    @Task(\"typescript\")\n    public async typescript(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            this.tsProject.src()\n                .pipe(sourcemaps.init())\n                .pipe(this.tsProject())\n                .pipe(sourcemaps.write(\".\"))\n                .pipe(gulp.dest(\"\"))\n                .on(\"finish\", resolve)\n                .on(\"error\", reject);\n        });\n    }\n\n    @Task(\"build\")\n    public async build(): Promise<void> {\n        return this.typescript();\n    }\n\n    @Task(\"server\")\n    public async server(): Promise<void> {\n        return pm2.connect((err) => {\n            if (err) {\n                console.error(err);\n                process.exit(2);\n            }\n\n            let pm2Options: any = {\n                name: \"service\",\n                script: \"./index\", // Script to be run\n                exec_mode: \"cluster\", // Allows your app to be clustered\n                //instances : 4, // Optional: Scales your app by 4\n                //max_memory_restart : \"100M\" // Optional: Restarts your app if it reaches 100Mo\n                source_map_support: true,\n            };\n            if (this.isDevMode()) {\n                pm2Options.watch = this.src;\n                pm2Options.ignore_watch = [\"node_modules\", ...this.tsSrc];\n                pm2Options.watch_options = {\n                    followSymlinks: false\n                };\n            }\n\n            pm2.start(pm2Options, (err, apps) => {\n                pm2.disconnect();   // Disconnects from PM2\n                if (err) throw err;\n            });\n        });\n    }\n\n    @Task(\"test\")\n    public async test(): Promise<void> {\n        spawn(\"node\", [\".\"], { stdio: \"inherit\" });\n    }\n\n    @Task(\"dev\")\n    public async dev(): Promise<void> {\n        this.environment = process.env.NODE_ENV || \"development\";\n        return this.build()\n            .then(this.watch.bind(this));\n    }\n\n    @Task(\"dev:server\")\n    public async devRun(): Promise<void> {\n        return this.dev()\n            .then(this.server.bind(this));\n    }\n\n    @SequenceTask()\n    public default(): Array<string> {\n        return [\"clean\", \"build\", \"server\"];\n    }\n}\n"]}
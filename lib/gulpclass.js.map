{"version":3,"sources":["lib/gulpclass.ts"],"names":[],"mappings":"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","file":"gulpclass.js","sourcesContent":["import { Gulpclass, SequenceTask, Task } from \"gulpclass/Decorators\";\nimport { spawn } from \"child_process\";\n\nimport * as gulp from \"gulp\";\nimport * as del from \"del\";\nimport * as ts from \"gulp-typescript\";\nimport * as watch from \"gulp-watch\";\nimport * as mocha from \"gulp-mocha\";\nimport * as sourcemaps from \"gulp-sourcemaps\";\nimport * as pm2 from \"pm2\";\nimport * as _ from \"lodash\";\n\n\nexport interface PortConfig {\n    web: number;\n    debug: number;\n}\n\nexport interface PathConfig {\n    typescript: string[];\n    generated: string[];\n    resources: string[];\n    integrationTests: string[];\n    unitTests: string[];\n    tsConfig: string;\n    index: string;\n    workingDir: string;\n}\n\nexport interface ServerConfig {\n    /**\n     * Web server process numbers\n     * Set by Heroku or -1 to scale to max cpu core -1\n     */\n    concurrency: number;\n    /**\n     * Max RAM memory when server will be reloaded\n     */\n    maxMemory: number;\n    /**\n     * The maximum number of times in a row a script will be restarted if it exits in less than minUptime\n     */\n    maxRestarts: number;\n    /**\n     * Should server be run in daemon mode\n     */\n    daemon: boolean;\n}\n\n/**\n * Configuration for the gulp, web server, running env, etc\n */\nexport interface GulpConfig {\n    /**\n     * Name of the app that will be present in the process table of the PM2 and in the logs\n     */\n    name: string,\n    /**\n     * Environment: development, production, testing\n     * When starting with word \"dev\" it\"s a development env with debug mode and live watch reloading.\n     */\n    environment?: string;\n    /**\n     * Ports to open the web, debug\n     */\n    port?: PortConfig;\n    /**\n     * Paths for the sources and configurations.\n     */\n    path?: PathConfig;\n    /**\n     * Config dedicated to the server part of the application that listening on some actions.\n     */\n    server?: ServerConfig;\n}\n\n/**\n * Default values for the configuration\n * @type {GulpConfig}\n */\nexport const DEFAULT_CONFIG: GulpConfig = {\n    name: \"app\",\n    environment: process.env.NODE_ENV || \"production\",\n    port: {\n        web: process.env.PORT || 8080,\n        debug: process.env.PORT_DEBUG || 5050,\n    },\n    path: {\n        typescript: [\"./**/*.ts\"],\n        generated: [\"./**/*.js\"],\n        resources: [\"./**/*.json\", \"./**/*.yml\", \"./*.lock\"],\n        integrationTests: [\"./**/*.spec.js\"],\n        unitTests: [\"./**/*.test.js\"],\n        tsConfig: \"./tsconfig.json\",\n        index: \".\",\n        workingDir: \".\",\n    },\n    server: {\n        concurrency: process.env.WEB_CONCURRENCY || -1,\n        maxMemory: process.env.WEB_MEMORY || 512,\n        maxRestarts: 10,\n        daemon: false,\n    },\n};\n\n@Gulpclass()\nexport default class Gulpfile {\n\n    /**\n     * Update default configuration before using it\n     * @param config to change the default\n     * @return {Gulpfile} class of the gulpfile\n     */\n    public static forConfig(config: GulpConfig = null): Function {\n        if (config) {\n            _.merge(DEFAULT_CONFIG, config);\n        }\n        console.log(`Start working for config: ${JSON.stringify(DEFAULT_CONFIG)}`);\n        return Gulpfile;\n    };\n\n    // CONFIG\n    protected config: GulpConfig = DEFAULT_CONFIG;\n\n    // PATHS\n    public src: string[] = [...this.config.path.typescript, ...this.config.path.resources];\n    public ignoreRunningSrc: string[] = [\"node_modules\", ...this.config.path.typescript];\n    public runningSrc: string[] = [...this.config.path.generated, ...this.config.path.resources];\n\n    // PRE-CONFIG\n    protected tsProject: any = ts.createProject(this.config.path.tsConfig);\n\n    public isDevMode(): boolean {\n        return this.config.environment.startsWith(\"dev\");\n    }\n\n    @Task(\"clean\")\n    public async clean(): Promise<void> {\n        return del([\"./lib/**/*.js\", \"./**/*.map\"]);\n    }\n\n    @Task(\"watch\")\n    public async watch(): Promise<void> {\n        return watch(this.config.path.typescript, async (): Promise<void> => {\n            console.log(\"TypeScript source changed. Transpiling...\");\n            return this.typescript();\n        });\n    }\n\n    @Task(\"typescript\")\n    public async typescript(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            this.tsProject.src()\n                .pipe(sourcemaps.init())\n                .pipe(this.tsProject())\n                .pipe(sourcemaps.write(\".\"))\n                .pipe(gulp.dest(\"\"))\n                .on(\"finish\", resolve)\n                .on(\"error\", reject);\n        });\n    }\n\n    @Task(\"build\")\n    public async build(): Promise<void> {\n        console.log(`build for app: ${this.config.name}`);\n        return this.typescript();\n    }\n\n    @Task(\"server:stop\")\n    public async serverStop(): Promise<void> {\n        return pm2.killDaemon();\n    }\n\n    @Task(\"server\")\n    public async server(): Promise<void> {\n\n        let MACHINE_NAME = \"hk1\";\n        let PRIVATE_KEY = \"XXXXX\"; // Keymetrics Private key\n        let PUBLIC_KEY = \"XXXXX\"; // Keymetrics Public  key\n\n        return pm2.connect(this.config.server.daemon, (err: any): void => {\n            if (err) {\n                console.error(\"[PM2]:\"+err);\n                process.exit(2);\n            }\n\n            pm2.start({\n                script: this.config.path.index,\n                name: `${this.config.name}`, // this is hack to fix the pm2 error for setting this as a reference\n                exec_mode: (this.isDevMode()) ? \"fork\" : \"cluster\", // ----> https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md#schema\n                instances: (this.isDevMode()) ? 1 : this.config.server.concurrency,\n                max_memory_restart: this.config.server.maxMemory + \"M\", // Auto-restart if process takes more than XXmo\n                maxRestarts: this.config.server.maxRestarts,\n                source_map_support: true,\n                env: {  // If needed declare some environment variables\n                    \"NODE_ENV\": this.config.environment,\n                    \"PORT\": this.config.port.web,\n                },\n                cwd: this.config.path.workingDir,\n                interpreterArgs: [`--inspect=${this.config.port.debug}`],\n                post_update: [\"npm install\"], // Commands to execute once we do a pull from Keymetrics\n                watch: (this.isDevMode()) ? this.runningSrc : undefined,\n                ignore_watch: (this.isDevMode()) ? this.ignoreRunningSrc : undefined,\n                watch_options: (this.isDevMode()) ? {\n                    followSymlinks: false\n                } : undefined,\n            }, (err: any, apps): void => {\n                if (err) {\n                    throw err;\n                }\n\n                //pm2.interact(PRIVATE_KEY, PUBLIC_KEY, MACHINE_NAME, () => {\n\n                // Display logs in standard output\n                pm2.launchBus((err: any, bus): void => {\n                    console.log(\"[PM2] Log streaming started\");\n\n                    bus.on(\"log:out\", (packet): void => {\n                        // stream the logs\n                        console.log(\"[App:%s] %s\", packet.process.name, packet.data);\n                    });\n\n                    bus.on(\"log:err\", (packet): void => {\n                        console.error(\"[App:%s][Err] %s\", packet.process.name, packet.data);\n                        //if (this.isDevMode()) { // kill app on error in dev mode\n                        //    pm2.killDaemon();\n                        //}\n                    });\n                });\n\n                //});\n            });\n        });\n\n    }\n\n    @Task(\"integration:test\")\n    public async integrationTest(): Promise<void> {\n        return this.typescript().then(() => {\n            gulp.src(this.config.path.integrationTests, { read: false })\n                .pipe(mocha({\n                    reporter: 'spec',\n                    //globals: { },\n                }));\n        });\n    }\n\n    @Task(\"unit:test\")\n    public async unitTest(): Promise<void> {\n        return this.typescript().then(() => {\n            gulp.src(this.config.path.unitTests, { read: false })\n                .pipe(mocha({\n                    reporter: 'spec',\n                    //globals: { },\n                }));\n        });\n    }\n\n    @Task(\"test\")\n    public async test(): Promise<void> {\n        return this.unitTest()\n            .then(this.integrationTest.bind(this));\n        //spawn(\"node\", [\".\"], { stdio: \"inherit\" });\n    }\n\n    @Task(\"dev\")\n    public async dev(): Promise<void> {\n        this.config.environment = process.env.NODE_ENV || \"development\";\n        return this.build()\n            .then(this.watch.bind(this));\n    }\n\n    @Task(\"dev:server\")\n    public async devServer(): Promise<void> {\n        return this.dev()\n            .then(this.server.bind(this));\n    }\n\n    @Task(\"run:server\")\n    public async runServer(): Promise<void> {\n        await this.build();\n        await this.server();\n    }\n\n\n    @SequenceTask()\n    public default(): Array<string> {\n        return [\"clean\", \"run:server\"];\n    }\n}\n"]}
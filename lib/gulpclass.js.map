{"version":3,"sources":["lib/gulpclass.ts"],"names":[],"mappings":"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","file":"gulpclass.js","sourcesContent":["import { Gulpclass, SequenceTask, Task } from \"gulpclass/Decorators\";\nimport { spawn } from \"child_process\";\n\nimport * as gulp from \"gulp\";\nimport * as del from \"del\";\nimport * as ts from \"gulp-typescript\";\nimport * as watch from \"gulp-watch\";\nimport * as mocha from \"gulp-mocha\";\nimport * as sourcemaps from \"gulp-sourcemaps\";\nimport * as pm2 from \"pm2\";\nimport * as _ from \"lodash\";\n\n\nexport interface PortConfig {\n    web: number;\n    debug: number;\n}\n\nexport interface PathConfig {\n    typescript: string[];\n    generated: string[];\n    resources: string[];\n    integrationTests: string[];\n    unitTests: string[];\n    tsConfig: string;\n}\n\n/**\n * Configuration for the gulp, web server, running env, etc\n */\nexport interface GulpConfig {\n    /**\n     * Name of the app that will be present in the process table of the PM2 and in the logs\n     */\n    name: string,\n    /**\n     * Environment: development, production, testing\n     * When starting with word \"dev\" it\"s a development env with debug mode and live watch reloading.\n     */\n    environment?: string;\n    /**\n     * Web server process numbers\n     * Set by Heroku or -1 to scale to max cpu core -1\n     */\n    webConcurrency?: number;\n    /**\n     * Max RAM memory when server will be reloaded\n     */\n    maxMemory?: number;\n    /**\n     * Ports to open the web, debug\n     */\n    port?: PortConfig;\n    /**\n     * Paths for the sources and configurations.\n     */\n    paths?: PathConfig;\n}\n\n/**\n * Default values for the configuration\n * @type {GulpConfig}\n */\nexport const DEFAULT_CONFIG: GulpConfig = {\n    name: \"app\",\n    environment: process.env.NODE_ENV || \"production\",\n    webConcurrency: process.env.WEB_CONCURRENCY || -1,\n    maxMemory: process.env.WEB_MEMORY || 512,\n    port: {\n        web: process.env.PORT || 8080,\n        debug: process.env.PORT_DEBUG || 5050,\n    },\n    paths: {\n        typescript: [\"./**/*.ts\"],\n        generated: [\"./**/*.js\"],\n        resources: [\"./**/*.json\", \"./**/*.yml\", \"./*.lock\"],\n        integrationTests: [\"./**/*.spec.js\"],\n        unitTests: [\"./**/*.test.js\"],\n        tsConfig: \"./tsconfig.json\",\n    }\n};\n\n@Gulpclass()\nexport default class Gulpfile {\n\n    /**\n     * Update default configuration before using it\n     * @param config to change the default\n     * @return {Gulpfile} class of the gulpfile\n     */\n    public static forConfig(config: GulpConfig = null): Function {\n        if (config) {\n\n            Object.keys(config).forEach(key => DEFAULT_CONFIG[key] = _.merge(config[key], DEFAULT_CONFIG[key]));\n        }\n        return Gulpfile;\n    };\n\n    // CONFIG\n    protected config: GulpConfig = DEFAULT_CONFIG;\n\n    // PATHS\n    public src: string[] = [...this.config.paths.typescript, ...this.config.paths.resources];\n    public ignoreRunningSrc: string[] = [\"node_modules\", ...this.config.paths.typescript];\n    public runningSrc: string[] = [...this.config.paths.generated, ...this.config.paths.resources];\n\n    // PRE-CONFIG\n    protected tsProject: any = ts.createProject(this.config.paths.tsConfig);\n\n    public isDevMode(): boolean {\n        return this.config.environment.startsWith(\"dev\");\n    }\n\n    @Task(\"clean\")\n    public async clean(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            del([\"./lib/**/*.js\", \"./gulpclass.js\", \"./**/*.map\"], resolve);\n        });\n    }\n\n    @Task(\"watch\")\n    public async watch(): Promise<void> {\n        return watch(this.config.paths.typescript, async (): Promise<void> => {\n            console.log(\"TypeScript source changed. Transpiling...\");\n            return this.typescript();\n        });\n    }\n\n    @Task(\"typescript\")\n    public async typescript(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            this.tsProject.src()\n                .pipe(sourcemaps.init())\n                .pipe(this.tsProject())\n                .pipe(sourcemaps.write(\".\"))\n                .pipe(gulp.dest(\"\"))\n                .on(\"finish\", resolve)\n                .on(\"error\", reject);\n        });\n    }\n\n    @Task(\"build\")\n    public async build(): Promise<void> {\n        console.log(`build for app: ${this.config.name}`);\n        return this.typescript();\n    }\n\n    @Task(\"server:stop\")\n    public async serverStop(): Promise<void> {\n        return pm2.killDaemon();\n    }\n\n    @Task(\"server\")\n    public async server(): Promise<void> {\n\n        let MACHINE_NAME = \"hk1\";\n        let PRIVATE_KEY = \"XXXXX\"; // Keymetrics Private key\n        let PUBLIC_KEY = \"XXXXX\"; // Keymetrics Public  key\n\n        return pm2.connect(() => {\n            pm2.start({\n                script: \".\",\n                name: this.config.name, // ----> THESE ATTRIBUTES ARE OPTIONAL:\n                exec_mode: (this.isDevMode()) ? \"fork\" : \"cluster\", // ----> https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md#schema\n                instances: (this.isDevMode()) ? 1 : this.config.webConcurrency,\n                max_memory_restart: this.config.maxMemory + \"M\", // Auto-restart if process takes more than XXmo\n                source_map_support: true,\n                env: {  // If needed declare some environment variables\n                    \"NODE_ENV\": this.config.environment,\n                    \"PORT\": this.config.port.web,\n                },\n                interpreterArgs: [`--debug=${this.config.port.debug}`],\n                post_update: [\"npm install\"], // Commands to execute once we do a pull from Keymetrics\n                watch: (this.isDevMode()) ? this.runningSrc : undefined,\n                ignore_watch: (this.isDevMode()) ? this.ignoreRunningSrc : undefined,\n                watch_options: (this.isDevMode()) ? {\n                    followSymlinks: false\n                } : undefined,\n            }, () => {\n                //pm2.interact(PRIVATE_KEY, PUBLIC_KEY, MACHINE_NAME, () => {\n\n                // Display logs in standard output\n                pm2.launchBus((err, bus) => {\n                    console.log(\"[PM2] Log streaming started\");\n\n                    bus.on(\"log:out\", (packet) => {\n                        console.log(\"[App:%s] %s\", packet.process.name, packet.data);\n                    });\n\n                    bus.on(\"log:err\", (packet) => {\n                        console.error(\"[App:%s][Err] %s\", packet.process.name, packet.data);\n                        //if (this.isDevMode()) { // kill app on error in dev mode\n                        //    pm2.killDaemon();\n                        //}\n                    });\n                });\n\n                //});\n            });\n        });\n\n    }\n\n    @Task(\"integration:test\")\n    public async integrationTest(): Promise<void> {\n        return gulp.src(this.config.paths.integrationTests, { read: false })\n            .pipe(mocha({\n                reporter: 'spec',\n                //globals: { },\n            }));\n    }\n\n    @Task(\"unit:test\")\n    public async unitTest(): Promise<void> {\n        return gulp.src(this.config.paths.unitTests, { read: false })\n            .pipe(mocha({\n                reporter: 'spec',\n                //globals: { },\n            }));\n    }\n\n    @Task(\"test\")\n    public async test(): Promise<void> {\n        return this.unitTest().then(this.integrationTest.bind(this));\n        //spawn(\"node\", [\".\"], { stdio: \"inherit\" });\n    }\n\n    @Task(\"dev\")\n    public async dev(): Promise<void> {\n        this.config.environment = process.env.NODE_ENV || \"development\";\n        return this.build()\n            .then(this.watch.bind(this));\n    }\n\n    @Task(\"dev:server\")\n    public async devServer(): Promise<void> {\n        return this.dev()\n            .then(this.server.bind(this));\n    }\n\n    @SequenceTask()\n    public default(): Array<string> {\n        return [\"clean\", \"build\", \"server\"];\n    }\n}\n"]}
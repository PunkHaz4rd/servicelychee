{"version":3,"sources":["lib/gulpclass.ts"],"names":[],"mappings":"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","file":"gulpclass.js","sourcesContent":["import { Gulpclass, SequenceTask, Task } from \"gulpclass/Decorators\";\nimport { spawn } from \"child_process\";\n\nimport * as gulp from \"gulp\";\nimport * as del from \"del\";\nimport * as ts from \"gulp-typescript\";\nimport * as watch from \"gulp-watch\";\nimport * as sourcemaps from \"gulp-sourcemaps\";\nimport * as pm2 from \"pm2\";\n\n\n@Gulpclass()\nexport default class Gulpfile {\n\n    // PATHS\n    public tsSrc: Array<string> = [\"./**/*.ts\"];\n    public jsSrc: Array<string> = [\"./**/*.ts\"];\n    public resourceSrc: Array<string> = [\"./**/*.json\", \"./**/*.yml\", \"./*.lock\"];\n    public src: Array<string> = [...this.tsSrc, ...this.resourceSrc];\n    public runningSrc: Array<string> = [...this.jsSrc, ...this.resourceSrc];\n\n    // ENV\n    public environment: string = process.env.NODE_ENV || \"production\";\n\n    // CONFIG\n    protected tsProject: any = ts.createProject(\"./tsconfig.json\");\n\n    protected webConcurrency: number = process.env.WEB_CONCURRENCY || -1; // Set by Heroku or -1 to scale to max cpu core -1\n    protected maxMemory: number = process.env.WEB_MEMORY || 512;// \" \" \"\n\n    public isDevMode(): boolean {\n        return this.environment.startsWith(\"dev\");\n    }\n\n    @Task(\"clean\")\n    public async clean(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            del([\"./lib/**/*.js\", \"./gulpclass.js\", \"./**/*.map\"], resolve);\n        });\n    }\n\n    @Task(\"watch\")\n    public async watch(): Promise<void> {\n        return watch(this.tsSrc, async (): Promise<void> => {\n            console.log(\"TypeScript source changed. Transpiling...\");\n            return this.typescript();\n        });\n    }\n\n    @Task(\"typescript\")\n    public async typescript(): Promise<void> {\n        return new Promise<void>((resolve, reject): void => {\n            this.tsProject.src()\n                .pipe(sourcemaps.init())\n                .pipe(this.tsProject())\n                .pipe(sourcemaps.write(\".\"))\n                .pipe(gulp.dest(\"\"))\n                .on(\"finish\", resolve)\n                .on(\"error\", reject);\n        });\n    }\n\n    @Task(\"build\")\n    public async build(): Promise<void> {\n        return this.typescript();\n    }\n\n    @Task(\"server\")\n    public async server(): Promise<void> {\n        /*return pm2.connect((err) => {\n         if (err) {\n         console.error(err);\n         process.exit(2);\n         }\n\n         let pm2Options: any = {\n         name: \"service\",\n         script: \"./index.js\", // Script to be run\n         exec_mode: \"cluster\", // Allows your app to be clustered\n         //instances : 4, // Optional: Scales your app by 4\n         //max_memory_restart : \"100M\" // Optional: Restarts your app if it reaches 100Mo\n         source_map_support: true,\n         };\n         if (this.isDevMode()) {\n         pm2Options.watch = this.src;\n         pm2Options.ignore_watch = [\"node_modules\", ...this.tsSrc];\n         pm2Options.watch_options = {\n         followSymlinks: false\n         };\n         }\n\n         pm2.start(pm2Options, (err, apps) => {\n         pm2.disconnect();   // Disconnects from PM2\n         if (err) throw err;\n         });\n         });*/\n        \n        let MACHINE_NAME = 'hk1';\n        let PRIVATE_KEY = 'XXXXX'; // Keymetrics Private key\n        let PUBLIC_KEY = 'XXXXX'; // Keymetrics Public  key\n\n        return pm2.connect(() => {\n            pm2.start({\n                script: './index.js',\n                name: 'production-app', // ----> THESE ATTRIBUTES ARE OPTIONAL:\n                exec_mode: 'cluster', // ----> https://github.com/Unitech/PM2/blob/master/ADVANCED_README.md#schema\n                instances: this.webConcurrency,\n                max_memory_restart: this.maxMemory + 'M', // Auto-restart if process takes more than XXmo\n                env: {  // If needed declare some environment variables\n                    \"NODE_ENV\": this.environment,\n                },\n                post_update: [\"npm install\"] // Commands to execute once we do a pull from Keymetrics\n            }, () => {\n                //pm2.interact(PRIVATE_KEY, PUBLIC_KEY, MACHINE_NAME, () => {\n\n                // Display logs in standard output\n                pm2.launchBus((err, bus) => {\n                    console.log('[PM2] Log streaming started');\n\n                    bus.on('log:out', function (packet) {\n                        console.log('[App:%s] %s', packet.process.name, packet.data);\n                    });\n\n                    bus.on('log:err', function (packet) {\n                        console.error('[App:%s][Err] %s', packet.process.name, packet.data);\n                    });\n                });\n\n                //});\n            });\n        });\n\n    }\n\n    @Task(\"test\")\n    public async test(): Promise<void> {\n        spawn(\"node\", [\".\"], { stdio: \"inherit\" });\n    }\n\n    @Task(\"dev\")\n    public async dev(): Promise<void> {\n        this.environment = process.env.NODE_ENV || \"development\";\n        return this.build()\n            .then(this.watch.bind(this));\n    }\n\n    @Task(\"dev:server\")\n    public async devServer(): Promise<void> {\n        return this.dev()\n            .then(this.server.bind(this));\n    }\n\n    @SequenceTask()\n    public default(): Array<string> {\n        return [\"clean\", \"build\", \"server\"];\n    }\n}\n"]}
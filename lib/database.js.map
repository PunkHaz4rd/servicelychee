{"version":3,"sources":["lib/database.ts"],"names":[],"mappings":"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","file":"database.js","sourcesContent":["import { PlumFacade, ValidationPlumError } from \"microplum\";\nimport { Document, Model } from \"mongoose\";\n\n\nexport class RestFacade<T extends Document> extends PlumFacade {\n    constructor(public Schema: Model, act?: (args: any) => Promise<any>, args?: { [key: string]: any }) {\n        super(act, args);\n    }\n\n    protected async _callSync(id: string, data: {[key:string]:any} = {}): Promise<void> {\n        // empty no sync by default\n    }\n\n    protected async _sync(model: T): Promise<void> {\n        if (!model._kiwiId) {\n            let error = await model.validate();\n            if (error) {\n                throw new ValidationPlumError(error);\n            }\n            let data = {};\n            if (model && model.toObject) {\n                data[this._name()] = model.toObject();\n            }\n            await this._callSync(model._id, data);\n        }\n        return Promise.resolve();\n    }\n\n    protected _doSync(update: { [key: string]: any }): boolean {\n        return !this.args.noSync || Object.keys(update)\n                .filter(key => !key.startsWith('_'))\n                .length > 0;\n    }\n\n    protected _name(): string {\n        return this.args.role;\n    }\n\n    public async create(input: { [key: string]: any }): Promise<T> {\n        input._kiwiId = (this.args.syncId) ? this.args.syncId : null;\n        let model = new this.Schema(input);\n        await this._sync(model);\n        return model.save();\n    }\n\n    public async update(conditions: { [key: string]: any }, update: { [key: string]: any }): Promise<T[]> {\n        update._modified = Date.now();\n        if (this.args.syncId) {\n            update._kiwiId = this.args.syncId;\n        } else if (this._doSync(update)) {\n            update._kiwiId = null;\n        }\n\n        let models: T[] = await this.find(conditions);\n        return Promise.all(models.map(async model => {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        }));\n    }\n\n    public async updateOne(conditions: { [key: string]: any }, update: { [key: string]: any }): Promise<T> {\n        update._modified = Date.now();\n        if (this.args.syncId) {\n            update._kiwiId = this.args.syncId;\n        } else if (this._doSync(update)) {\n            update._kiwiId = null;\n        }\n\n        let model: T = await this.findOne(conditions);\n        if (model) {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        } else {\n            return this.create(update);\n        }\n    }\n\n    public async updateById(id: string, update: { [key: string]: any }): Promise<T> {\n        update._modified = Date.now();\n        if (this.args.syncId) {\n            update._kiwiId = this.args.syncId;\n        } else if (this._doSync(update)) {\n            update._kiwiId = null;\n        }\n\n        let model = await this.findById(id);\n        if (model) {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        } else {\n            return this.create(update);\n        }\n    }\n\n    public async find(query: { [key: string]: any } = {}): Promise<T[]> { // returns [] of not found\n        query._deactivated = null;\n        return this.Schema\n            .find(query)\n            .exec();\n    }\n\n    public async findOne(query: { [key: string]: any } = {}): Promise<T> { // returns null if not found\n        query._deactivated = null;\n        return this.Schema\n            .findOne(query)\n            .exec();\n    }\n\n    public async findById(id: string): Promise<T> {\n        return this.Schema\n            .findById(id)\n            .exec()\n            .then(doc => (doc && !doc._deactivated) ? doc : null);\n    }\n\n    public async remove(conditions: { [key: string]: any } = {}): Promise<T[]> {\n        return this.update(conditions, {\n            _deactivated: Date.now(),\n            _kiwiId: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.Schema\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async removeOne(conditions: { [key: string]: any } = {}): Promise<T> {\n        return this.updateOne(conditions, {\n            _deactivated: Date.now(),\n            _kiwiId: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.Schema\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async removeById(id: string): Promise<T> {\n        return this.updateById(id, {\n            _deactivated: Date.now(),\n            _kiwiId: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.Schema\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async clean(): Promise<T[]> {\n        return this.remove({});\n    }\n\n}\n"]}
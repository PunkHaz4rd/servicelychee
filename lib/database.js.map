{"version":3,"sources":["lib/database.ts"],"names":[],"mappings":"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","file":"database.js","sourcesContent":["import { PlumFacade, ValidationPlumError } from \"microplum\";\nimport { Document, Model } from \"mongoose\";\n\n\nclass DocumentFacade<T extends Document> extends PlumFacade {\n    constructor(public DbModel: Model<T>, act?: (args: any) => Promise<any>, args?: { [key: string]: any }) {\n        super(act, args);\n    }\n\n    protected async _callSync(id: string, data: { [key: string]: any } = {}): Promise<void> {\n        // empty no sync by default\n    }\n\n    protected async _sync(model: T): Promise<void> {\n        if (this._hasSync() && !model[\"_sync\"]) {\n            let error = await model.validate();\n            if (error) {\n                console.log(`[Validation ERR] DB validation <= ${JSON.stringify(error)}`);\n                throw new ValidationPlumError({}, \"Db validation errors\");\n            }\n            let data = {};\n            if (model && model.toObject) {\n                data[this._name()] = model.toObject();\n            }\n            await this._callSync(model._id, data);\n        }\n        return Promise.resolve();\n    }\n\n    protected _hasSync(): boolean {\n        return !this.args.noSync && this.DbModel.schema[\"paths\"][\"_sync\"];\n    }\n\n    protected _doSync(update: { [key: string]: any }): boolean {\n        return this._hasSync() && Object.keys(update)\n                .filter(key => !key.startsWith('_'))\n                .length > 0;\n    }\n\n    protected _name(): string {\n        return this.args.role;\n    }\n\n    protected prepareInputForWriting(input: { [key: string]: any }): void {\n        input._modified = Date.now();\n        if (this._doSync(input)) {\n            input._sync = (this.args.syncId) ? this.args.syncId : null;\n            input._link = (this.args.linkId) ? this.args.linkId : null;\n        } else {\n            this.args.noSync = true;\n        }\n    }\n\n    public async create(input: { [key: string]: any }): Promise<T> {\n        input._sync = (this.args.syncId) ? this.args.syncId : null;\n        let model = new this.DbModel(input);\n        await this._sync(model);\n        return model.save();\n    }\n\n    public async update(conditions: { [key: string]: any }, update: { [key: string]: any }): Promise<T[]> {\n        this.prepareInputForWriting(update);\n        let models: T[] = await this.find(conditions);\n        return Promise.all(models.map(async model => {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        }));\n    }\n\n    public async updateOne(conditions: { [key: string]: any }, update: { [key: string]: any }): Promise<T> {\n        this.prepareInputForWriting(update);\n        let model: T = await this.findOne(conditions);\n        if (model) {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        } else {\n            return this.create(update);\n        }\n    }\n\n    public async updateById(id: string, update: { [key: string]: any }): Promise<T> {\n        this.prepareInputForWriting(update);\n        let model = await this.findById(id);\n        if (model) {\n            model.set(update);\n            if (model.isModified()) {\n                await this._sync(model);\n                return model.save();\n            } else {\n                return Promise.resolve(model);\n            }\n        } else {\n            return this.create(update);\n        }\n    }\n\n    public async find(query: { [key: string]: any } = {}): Promise<T[]> { // returns [] of not found\n        query._deactivated = null;\n        return this.DbModel\n            .find(query)\n            .exec();\n    }\n\n    public async findOne(query: { [key: string]: any } = {}): Promise<T> { // returns null if not found\n        query._deactivated = null;\n        return this.DbModel\n            .findOne(query)\n            .exec();\n    }\n\n    public async findById(id: string): Promise<T> {\n        return this.DbModel\n            .findById(id)\n            .exec()\n            .then(doc => (doc && !doc[\"_deactivated\"]) ? doc : null);\n    }\n\n    public async remove(conditions: { [key: string]: any } = {}): Promise<T[]> {\n        return this.update(conditions, {\n            _deactivated: Date.now(),\n            _sync: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.DbModel\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async removeOne(conditions: { [key: string]: any } = {}): Promise<T> {\n        return this.updateOne(conditions, {\n            _deactivated: Date.now(),\n            _sync: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.DbModel\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async removeById(id: string): Promise<T> {\n        return this.updateById(id, {\n            _deactivated: Date.now(),\n            _sync: (this.args.syncId) ? this.args.syncId : null\n        });\n        //return this.DbModel\n        //    .findByIdAndRemove(id)\n        //    .exec();\n    }\n\n    public async clean(): Promise<T[]> {\n        return this.remove({});\n    }\n\n}\n\nexport class DatabaseFacade<T> extends DocumentFacade<T & Document> {\n\n}\n"]}